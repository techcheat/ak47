#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct LinkedList {
    struct Node* head;
};

void initList(struct LinkedList* list) {
    list->head = NULL;
}

void create(struct LinkedList* list) {
    int val;
    printf("Enter values (-1 to stop): ");
    while (1) {
        scanf("%d", &val);
        if (val == -1) break;
        insertAtEnd(list, val);
    }
    printf("List created successfully.\n");
}

void insertAtEnd(struct LinkedList* list, int val) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = val;
    newNode->next = NULL;

    if (list->head == NULL) {
        list->head = newNode;
    } else {
        struct Node* temp = list->head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void display(struct LinkedList* list) {
    if (list->head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node* temp = list->head;
    printf("List: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

void reverse(struct LinkedList* list) {
    struct Node* prev = NULL;
    struct Node* current = list->head;
    struct Node* nextNode = NULL;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }
    list->head = prev;
}

void displayReverse(struct LinkedList* list) {
    reverse(list);
    printf("Reversed ");
    display(list);
}

void freeList(struct LinkedList* list) {
    struct Node* temp;
    while (list->head != NULL) {
        temp = list->head;
        list->head = list->head->next;
        free(temp);
    }
}

int main() {
    struct LinkedList list;
    initList(&list);

    create(&list);
    display(&list);
    displayReverse(&list);

    freeList(&list);

    return 0;
}
